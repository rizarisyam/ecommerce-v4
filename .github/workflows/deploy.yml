# name: Laravel

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

#   workflow_dispatch:

# jobs:
#   laravel-tests:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - name: Copy .env
#         run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#       - name: Install Dependencies
#         run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
#       - name: Generate key
#         run: php artisan key:generate
#       - name: Directory Permissions
#         run: chmod -R 777 storage bootstrap/cache

#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Setup Node.js
#         uses: actions/setup-node@v2-beta
#         with:
#           node-version: "16"
#           check-latest: true
#       - name: Install NPM dependencies
#         run: npm install
#       - name: Compile assets for production
#         run: npm run production

#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Deployment
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           username: ${{ secrets.SSH_USERNAME }}
#           script: |
#             cd /var/www/ecommerce-v4/
#             git fetch
#             git reset --hard HEAD
#             git checkout -f main
#             git pull
#             composer install --no-dev --optimize-autoloader
#             php artisan optimize
#             php artisan queue:restart

# name: Laravel

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# jobs:
#   laravel:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: shivammathur/setup-php@master
#         with:
#           php-version: "8.1"
#       - uses: actions/checkout@v2
#       - name: Copy .env
#         run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#       - name: Install Dependencies
#         run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
#       - name: Generate key
#         run: php artisan key:generate
#       - name: Directory Permissions
#         run: chmod -R 777 storage bootstrap/cache
#       - name: Deployment
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           username: ${{ secrets.SSH_USERNAME }}
#           script: |
#             cd /var/www/html/ecommerce-app-v4/
#             git fetch
#             get reset --hard HEAD
#             git checkout -f main
#             git pull
#             composer install --no-dev --optimize-autoloader
#             php artisan optimize
#             php artisan queue:restart

name: Deploy Application

on:
  push:
    branches: [main]

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}

    steps:
      - uses: actions/checkout@v2
      - name: Compile CSS and Javascript
        run: |
          npm install
          npm run prod
      - name: Configure PHP 8.0
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.0
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml
      - name: Composer install
        run: |
          composer install --no-dev --no-interaction --prefer-dist
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *
      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz
      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-config.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"
  prepare-release-on-servers:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage

            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [create-deployment-artifacts, prepare-release-on-servers]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.beforeHooks }}
  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,LARAVEL_ENV
          script: |
            printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
  run-after-hooks:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        activate-release,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.afterHooks }}
  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs:
      [
        create-deployment-artifacts,
        prepare-release-on-servers,
        run-before-hooks,
        activate-release,
        run-after-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
